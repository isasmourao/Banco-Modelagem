@page "/"
@using Banco.Enums
@using Banco.Infrastructure.Interfaces
@using Banco.Services
@inject SessaoUsuarioService Sessao
@inject NavigationManager Nav
@inject IClienteRepository ClienteRepo
@inject IGerenteRepository GerenteRepo
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="home-background p-4 min-vh-100">
    <div class="home-header p-4 mb-4 rounded">
        <h1 class="mb-0">Bem-vindo ao Banco Digital</h1>
    </div>

    <div class="container bg-white p-4 rounded shadow-sm">
        @if (!Sessao.EstaLogado)
        {
            <p class="lead">Faça login para continuar:</p>

            <div class="mb-3">
                <label class="form-label">CPF:</label>
                <input class="form-control" @bind="cpf" />
            </div>
            <div class="mb-3">
                <label class="form-label">Senha:</label>
                <input type="password" class="form-control" @bind="senha" />
            </div>
            <button class="btn btn-primary" @onclick="Login">Entrar</button>
        }
        else
        {
            <p class="lead">Você está logado como <strong>@Sessao.Tipo</strong> - CPF <strong>@Sessao.CPF</strong>.</p>
            <p>Use o menu lateral para navegar nas opções disponíveis.</p>
        }
    </div>
</div>

@code {
    private string cpf;
    private string senha;

    private async Task Login()
    {
        if (string.IsNullOrWhiteSpace(cpf) || string.IsNullOrWhiteSpace(senha))
        {
            await JS.InvokeVoidAsync("alert", "Preencha CPF e senha.");
            return;
        }

        // Tenta como cliente
        var cliente = ClienteRepo.ObterPorCpf(cpf);
        if (cliente != null && cliente.Senha == senha)
        {
            Sessao.Login(cpf, TipoUsuarioEnum.Cliente);
            await JS.InvokeVoidAsync("alert", "Login realizado como Cliente!");
            Nav.NavigateTo("/", forceLoad: true);
            return;
        }

        // Tenta como gerente
        var gerente = GerenteRepo.ObterPorCpf(cpf);
        if (gerente != null && gerente.Senha == senha)
        {
            Sessao.Login(cpf, TipoUsuarioEnum.Gerente);
            await JS.InvokeVoidAsync("alert", "Login realizado como Gerente!");
            Nav.NavigateTo("/", forceLoad: true);
            return;
        }

        // Nenhum encontrado ou senha incorreta
        await JS.InvokeVoidAsync("alert", "CPF ou senha inválidos.");
    }
}
